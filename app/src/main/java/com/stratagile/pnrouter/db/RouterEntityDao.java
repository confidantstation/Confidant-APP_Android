package com.stratagile.pnrouter.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROUTER_ENTITY".
*/
public class RouterEntityDao extends AbstractDao<RouterEntity, Long> {

    public static final String TABLENAME = "ROUTER_ENTITY";

    /**
     * Properties of entity RouterEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RouterId = new Property(1, String.class, "routerId", false, "ROUTER_ID");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property UserId = new Property(3, String.class, "userId", false, "USER_ID");
        public final static Property RouterName = new Property(4, String.class, "routerName", false, "ROUTER_NAME");
        public final static Property LastCheck = new Property(5, boolean.class, "lastCheck", false, "LAST_CHECK");
    }


    public RouterEntityDao(DaoConfig config) {
        super(config);
    }
    
    public RouterEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROUTER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ROUTER_ID\" TEXT," + // 1: routerId
                "\"USERNAME\" TEXT," + // 2: username
                "\"USER_ID\" TEXT," + // 3: userId
                "\"ROUTER_NAME\" TEXT," + // 4: routerName
                "\"LAST_CHECK\" INTEGER NOT NULL );"); // 5: lastCheck
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROUTER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RouterEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String routerId = entity.getRouterId();
        if (routerId != null) {
            stmt.bindString(2, routerId);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String routerName = entity.getRouterName();
        if (routerName != null) {
            stmt.bindString(5, routerName);
        }
        stmt.bindLong(6, entity.getLastCheck() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RouterEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String routerId = entity.getRouterId();
        if (routerId != null) {
            stmt.bindString(2, routerId);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String routerName = entity.getRouterName();
        if (routerName != null) {
            stmt.bindString(5, routerName);
        }
        stmt.bindLong(6, entity.getLastCheck() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RouterEntity readEntity(Cursor cursor, int offset) {
        RouterEntity entity = new RouterEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // routerId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // routerName
            cursor.getShort(offset + 5) != 0 // lastCheck
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RouterEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRouterId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRouterName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastCheck(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RouterEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RouterEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RouterEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
