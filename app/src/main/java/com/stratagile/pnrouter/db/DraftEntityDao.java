package com.stratagile.pnrouter.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DRAFT_ENTITY".
*/
public class DraftEntityDao extends AbstractDao<DraftEntity, Long> {

    public static final String TABLENAME = "DRAFT_ENTITY";

    /**
     * Properties of entity DraftEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property ToUserId = new Property(3, String.class, "toUserId", false, "TO_USER_ID");
        public final static Property TaimeStamp = new Property(4, long.class, "taimeStamp", false, "TAIME_STAMP");
        public final static Property MsgType = new Property(5, int.class, "msgType", false, "MSG_TYPE");
        public final static Property UnReadCount = new Property(6, int.class, "unReadCount", false, "UN_READ_COUNT");
    }


    public DraftEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DraftEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DRAFT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CONTENT\" TEXT," + // 1: content
                "\"USER_ID\" TEXT," + // 2: userId
                "\"TO_USER_ID\" TEXT," + // 3: toUserId
                "\"TAIME_STAMP\" INTEGER NOT NULL ," + // 4: taimeStamp
                "\"MSG_TYPE\" INTEGER NOT NULL ," + // 5: msgType
                "\"UN_READ_COUNT\" INTEGER NOT NULL );"); // 6: unReadCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DRAFT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DraftEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String toUserId = entity.getToUserId();
        if (toUserId != null) {
            stmt.bindString(4, toUserId);
        }
        stmt.bindLong(5, entity.getTaimeStamp());
        stmt.bindLong(6, entity.getMsgType());
        stmt.bindLong(7, entity.getUnReadCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DraftEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String toUserId = entity.getToUserId();
        if (toUserId != null) {
            stmt.bindString(4, toUserId);
        }
        stmt.bindLong(5, entity.getTaimeStamp());
        stmt.bindLong(6, entity.getMsgType());
        stmt.bindLong(7, entity.getUnReadCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DraftEntity readEntity(Cursor cursor, int offset) {
        DraftEntity entity = new DraftEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // toUserId
            cursor.getLong(offset + 4), // taimeStamp
            cursor.getInt(offset + 5), // msgType
            cursor.getInt(offset + 6) // unReadCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DraftEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setToUserId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTaimeStamp(cursor.getLong(offset + 4));
        entity.setMsgType(cursor.getInt(offset + 5));
        entity.setUnReadCount(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DraftEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DraftEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DraftEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
