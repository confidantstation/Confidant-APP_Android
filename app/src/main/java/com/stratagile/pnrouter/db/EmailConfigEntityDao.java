package com.stratagile.pnrouter.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMAIL_CONFIG_ENTITY".
*/
public class EmailConfigEntityDao extends AbstractDao<EmailConfigEntity, Long> {

    public static final String TABLENAME = "EMAIL_CONFIG_ENTITY";

    /**
     * Properties of entity EmailConfigEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SmtpPort = new Property(1, int.class, "smtpPort", false, "SMTP_PORT");
        public final static Property PopPort = new Property(2, int.class, "popPort", false, "POP_PORT");
        public final static Property ImapPort = new Property(3, int.class, "imapPort", false, "IMAP_PORT");
        public final static Property SmtpHost = new Property(4, String.class, "smtpHost", false, "SMTP_HOST");
        public final static Property PopHost = new Property(5, String.class, "popHost", false, "POP_HOST");
        public final static Property ImapHost = new Property(6, String.class, "imapHost", false, "IMAP_HOST");
        public final static Property Account = new Property(7, String.class, "account", false, "ACCOUNT");
        public final static Property Password = new Property(8, String.class, "password", false, "PASSWORD");
    }


    public EmailConfigEntityDao(DaoConfig config) {
        super(config);
    }
    
    public EmailConfigEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMAIL_CONFIG_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SMTP_PORT\" INTEGER NOT NULL ," + // 1: smtpPort
                "\"POP_PORT\" INTEGER NOT NULL ," + // 2: popPort
                "\"IMAP_PORT\" INTEGER NOT NULL ," + // 3: imapPort
                "\"SMTP_HOST\" TEXT," + // 4: smtpHost
                "\"POP_HOST\" TEXT," + // 5: popHost
                "\"IMAP_HOST\" TEXT," + // 6: imapHost
                "\"ACCOUNT\" TEXT," + // 7: account
                "\"PASSWORD\" TEXT);"); // 8: password
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMAIL_CONFIG_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EmailConfigEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSmtpPort());
        stmt.bindLong(3, entity.getPopPort());
        stmt.bindLong(4, entity.getImapPort());
 
        String smtpHost = entity.getSmtpHost();
        if (smtpHost != null) {
            stmt.bindString(5, smtpHost);
        }
 
        String popHost = entity.getPopHost();
        if (popHost != null) {
            stmt.bindString(6, popHost);
        }
 
        String imapHost = entity.getImapHost();
        if (imapHost != null) {
            stmt.bindString(7, imapHost);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(8, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EmailConfigEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSmtpPort());
        stmt.bindLong(3, entity.getPopPort());
        stmt.bindLong(4, entity.getImapPort());
 
        String smtpHost = entity.getSmtpHost();
        if (smtpHost != null) {
            stmt.bindString(5, smtpHost);
        }
 
        String popHost = entity.getPopHost();
        if (popHost != null) {
            stmt.bindString(6, popHost);
        }
 
        String imapHost = entity.getImapHost();
        if (imapHost != null) {
            stmt.bindString(7, imapHost);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(8, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EmailConfigEntity readEntity(Cursor cursor, int offset) {
        EmailConfigEntity entity = new EmailConfigEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // smtpPort
            cursor.getInt(offset + 2), // popPort
            cursor.getInt(offset + 3), // imapPort
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // smtpHost
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // popHost
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imapHost
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // account
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // password
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EmailConfigEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSmtpPort(cursor.getInt(offset + 1));
        entity.setPopPort(cursor.getInt(offset + 2));
        entity.setImapPort(cursor.getInt(offset + 3));
        entity.setSmtpHost(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPopHost(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImapHost(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAccount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPassword(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EmailConfigEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EmailConfigEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EmailConfigEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
