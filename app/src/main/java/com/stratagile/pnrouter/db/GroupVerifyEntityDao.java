package com.stratagile.pnrouter.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_VERIFY_ENTITY".
*/
public class GroupVerifyEntityDao extends AbstractDao<GroupVerifyEntity, Long> {

    public static final String TABLENAME = "GROUP_VERIFY_ENTITY";

    /**
     * Properties of entity GroupVerifyEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property From = new Property(1, String.class, "From", false, "FROM");
        public final static Property To = new Property(2, String.class, "To", false, "TO");
        public final static Property Aduit = new Property(3, String.class, "Aduit", false, "ADUIT");
        public final static Property GId = new Property(4, String.class, "GId", false, "GID");
        public final static Property UserPubKey = new Property(5, String.class, "UserPubKey", false, "USER_PUB_KEY");
        public final static Property UserId = new Property(6, String.class, "userId", false, "USER_ID");
        public final static Property UserGroupKey = new Property(7, String.class, "UserGroupKey", false, "USER_GROUP_KEY");
        public final static Property FromName = new Property(8, String.class, "FromName", false, "FROM_NAME");
        public final static Property ToName = new Property(9, String.class, "ToName", false, "TO_NAME");
        public final static Property Gname = new Property(10, String.class, "Gname", false, "GNAME");
        public final static Property VerifyType = new Property(11, int.class, "verifyType", false, "VERIFY_TYPE");
    }


    public GroupVerifyEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GroupVerifyEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_VERIFY_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FROM\" TEXT," + // 1: From
                "\"TO\" TEXT," + // 2: To
                "\"ADUIT\" TEXT," + // 3: Aduit
                "\"GID\" TEXT," + // 4: GId
                "\"USER_PUB_KEY\" TEXT," + // 5: UserPubKey
                "\"USER_ID\" TEXT," + // 6: userId
                "\"USER_GROUP_KEY\" TEXT," + // 7: UserGroupKey
                "\"FROM_NAME\" TEXT," + // 8: FromName
                "\"TO_NAME\" TEXT," + // 9: ToName
                "\"GNAME\" TEXT," + // 10: Gname
                "\"VERIFY_TYPE\" INTEGER NOT NULL );"); // 11: verifyType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_VERIFY_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupVerifyEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String From = entity.getFrom();
        if (From != null) {
            stmt.bindString(2, From);
        }
 
        String To = entity.getTo();
        if (To != null) {
            stmt.bindString(3, To);
        }
 
        String Aduit = entity.getAduit();
        if (Aduit != null) {
            stmt.bindString(4, Aduit);
        }
 
        String GId = entity.getGId();
        if (GId != null) {
            stmt.bindString(5, GId);
        }
 
        String UserPubKey = entity.getUserPubKey();
        if (UserPubKey != null) {
            stmt.bindString(6, UserPubKey);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(7, userId);
        }
 
        String UserGroupKey = entity.getUserGroupKey();
        if (UserGroupKey != null) {
            stmt.bindString(8, UserGroupKey);
        }
 
        String FromName = entity.getFromName();
        if (FromName != null) {
            stmt.bindString(9, FromName);
        }
 
        String ToName = entity.getToName();
        if (ToName != null) {
            stmt.bindString(10, ToName);
        }
 
        String Gname = entity.getGname();
        if (Gname != null) {
            stmt.bindString(11, Gname);
        }
        stmt.bindLong(12, entity.getVerifyType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupVerifyEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String From = entity.getFrom();
        if (From != null) {
            stmt.bindString(2, From);
        }
 
        String To = entity.getTo();
        if (To != null) {
            stmt.bindString(3, To);
        }
 
        String Aduit = entity.getAduit();
        if (Aduit != null) {
            stmt.bindString(4, Aduit);
        }
 
        String GId = entity.getGId();
        if (GId != null) {
            stmt.bindString(5, GId);
        }
 
        String UserPubKey = entity.getUserPubKey();
        if (UserPubKey != null) {
            stmt.bindString(6, UserPubKey);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(7, userId);
        }
 
        String UserGroupKey = entity.getUserGroupKey();
        if (UserGroupKey != null) {
            stmt.bindString(8, UserGroupKey);
        }
 
        String FromName = entity.getFromName();
        if (FromName != null) {
            stmt.bindString(9, FromName);
        }
 
        String ToName = entity.getToName();
        if (ToName != null) {
            stmt.bindString(10, ToName);
        }
 
        String Gname = entity.getGname();
        if (Gname != null) {
            stmt.bindString(11, Gname);
        }
        stmt.bindLong(12, entity.getVerifyType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GroupVerifyEntity readEntity(Cursor cursor, int offset) {
        GroupVerifyEntity entity = new GroupVerifyEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // From
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // To
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Aduit
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // GId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // UserPubKey
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // UserGroupKey
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FromName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ToName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Gname
            cursor.getInt(offset + 11) // verifyType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupVerifyEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFrom(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAduit(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserPubKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserGroupKey(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFromName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setToName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGname(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVerifyType(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupVerifyEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupVerifyEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupVerifyEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
