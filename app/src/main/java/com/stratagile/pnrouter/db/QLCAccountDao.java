package com.stratagile.pnrouter.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QLCACCOUNT".
*/
public class QLCAccountDao extends AbstractDao<QLCAccount, Long> {

    public static final String TABLENAME = "QLCACCOUNT";

    /**
     * Properties of entity QLCAccount.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Seed = new Property(1, String.class, "seed", false, "SEED");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property PubKey = new Property(3, String.class, "pubKey", false, "PUB_KEY");
        public final static Property PrivKey = new Property(4, String.class, "privKey", false, "PRIV_KEY");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property IsCurrent = new Property(6, Boolean.class, "isCurrent", false, "IS_CURRENT");
        public final static Property AccountName = new Property(7, String.class, "accountName", false, "ACCOUNT_NAME");
        public final static Property IsAccountSeed = new Property(8, Boolean.class, "isAccountSeed", false, "IS_ACCOUNT_SEED");
        public final static Property WalletIndex = new Property(9, Integer.class, "walletIndex", false, "WALLET_INDEX");
        public final static Property Mnemonic = new Property(10, String.class, "mnemonic", false, "MNEMONIC");
        public final static Property IsBackUp = new Property(11, Boolean.class, "isBackUp", false, "IS_BACK_UP");
    }


    public QLCAccountDao(DaoConfig config) {
        super(config);
    }
    
    public QLCAccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QLCACCOUNT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SEED\" TEXT," + // 1: seed
                "\"PASSWORD\" TEXT," + // 2: password
                "\"PUB_KEY\" TEXT," + // 3: pubKey
                "\"PRIV_KEY\" TEXT," + // 4: privKey
                "\"ADDRESS\" TEXT," + // 5: address
                "\"IS_CURRENT\" INTEGER," + // 6: isCurrent
                "\"ACCOUNT_NAME\" TEXT," + // 7: accountName
                "\"IS_ACCOUNT_SEED\" INTEGER," + // 8: isAccountSeed
                "\"WALLET_INDEX\" INTEGER," + // 9: walletIndex
                "\"MNEMONIC\" TEXT," + // 10: mnemonic
                "\"IS_BACK_UP\" INTEGER);"); // 11: isBackUp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QLCACCOUNT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QLCAccount entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String seed = entity.getSeed();
        if (seed != null) {
            stmt.bindString(2, seed);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String pubKey = entity.getPubKey();
        if (pubKey != null) {
            stmt.bindString(4, pubKey);
        }
 
        String privKey = entity.getPrivKey();
        if (privKey != null) {
            stmt.bindString(5, privKey);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        Boolean isCurrent = entity.getIsCurrent();
        if (isCurrent != null) {
            stmt.bindLong(7, isCurrent ? 1L: 0L);
        }
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(8, accountName);
        }
 
        Boolean isAccountSeed = entity.getIsAccountSeed();
        if (isAccountSeed != null) {
            stmt.bindLong(9, isAccountSeed ? 1L: 0L);
        }
 
        Integer walletIndex = entity.getWalletIndex();
        if (walletIndex != null) {
            stmt.bindLong(10, walletIndex);
        }
 
        String mnemonic = entity.getMnemonic();
        if (mnemonic != null) {
            stmt.bindString(11, mnemonic);
        }
 
        Boolean isBackUp = entity.getIsBackUp();
        if (isBackUp != null) {
            stmt.bindLong(12, isBackUp ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QLCAccount entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String seed = entity.getSeed();
        if (seed != null) {
            stmt.bindString(2, seed);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String pubKey = entity.getPubKey();
        if (pubKey != null) {
            stmt.bindString(4, pubKey);
        }
 
        String privKey = entity.getPrivKey();
        if (privKey != null) {
            stmt.bindString(5, privKey);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        Boolean isCurrent = entity.getIsCurrent();
        if (isCurrent != null) {
            stmt.bindLong(7, isCurrent ? 1L: 0L);
        }
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(8, accountName);
        }
 
        Boolean isAccountSeed = entity.getIsAccountSeed();
        if (isAccountSeed != null) {
            stmt.bindLong(9, isAccountSeed ? 1L: 0L);
        }
 
        Integer walletIndex = entity.getWalletIndex();
        if (walletIndex != null) {
            stmt.bindLong(10, walletIndex);
        }
 
        String mnemonic = entity.getMnemonic();
        if (mnemonic != null) {
            stmt.bindString(11, mnemonic);
        }
 
        Boolean isBackUp = entity.getIsBackUp();
        if (isBackUp != null) {
            stmt.bindLong(12, isBackUp ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QLCAccount readEntity(Cursor cursor, int offset) {
        QLCAccount entity = new QLCAccount( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // seed
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pubKey
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // privKey
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isCurrent
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // accountName
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isAccountSeed
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // walletIndex
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // mnemonic
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // isBackUp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QLCAccount entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSeed(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPubKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrivKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsCurrent(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setAccountName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsAccountSeed(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setWalletIndex(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setMnemonic(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsBackUp(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QLCAccount entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QLCAccount entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QLCAccount entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
