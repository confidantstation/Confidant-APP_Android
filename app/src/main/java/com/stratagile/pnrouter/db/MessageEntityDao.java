package com.stratagile.pnrouter.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_ENTITY".
*/
public class MessageEntityDao extends AbstractDao<MessageEntity, Long> {

    public static final String TABLENAME = "MESSAGE_ENTITY";

    /**
     * Properties of entity MessageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property FriendId = new Property(2, String.class, "friendId", false, "FRIEND_ID");
        public final static Property MsgId = new Property(3, String.class, "msgId", false, "MSG_ID");
        public final static Property SendTime = new Property(4, String.class, "sendTime", false, "SEND_TIME");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Complete = new Property(6, Boolean.class, "complete", false, "COMPLETE");
        public final static Property BaseData = new Property(7, String.class, "baseData", false, "BASE_DATA");
        public final static Property FilePath = new Property(8, String.class, "filePath", false, "FILE_PATH");
        public final static Property FriendSignPublicKey = new Property(9, String.class, "friendSignPublicKey", false, "FRIEND_SIGN_PUBLIC_KEY");
        public final static Property FriendMiPublicKey = new Property(10, String.class, "friendMiPublicKey", false, "FRIEND_MI_PUBLIC_KEY");
        public final static Property VoiceTimeLen = new Property(11, int.class, "voiceTimeLen", false, "VOICE_TIME_LEN");
        public final static Property WidthAndHeight = new Property(12, String.class, "widthAndHeight", false, "WIDTH_AND_HEIGHT");
        public final static Property Porperty = new Property(13, String.class, "porperty", false, "PORPERTY");
    }


    public MessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"FRIEND_ID\" TEXT," + // 2: friendId
                "\"MSG_ID\" TEXT," + // 3: msgId
                "\"SEND_TIME\" TEXT," + // 4: sendTime
                "\"TYPE\" TEXT," + // 5: type
                "\"COMPLETE\" INTEGER," + // 6: complete
                "\"BASE_DATA\" TEXT," + // 7: baseData
                "\"FILE_PATH\" TEXT," + // 8: filePath
                "\"FRIEND_SIGN_PUBLIC_KEY\" TEXT," + // 9: friendSignPublicKey
                "\"FRIEND_MI_PUBLIC_KEY\" TEXT," + // 10: friendMiPublicKey
                "\"VOICE_TIME_LEN\" INTEGER NOT NULL ," + // 11: voiceTimeLen
                "\"WIDTH_AND_HEIGHT\" TEXT," + // 12: widthAndHeight
                "\"PORPERTY\" TEXT);"); // 13: porperty
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(3, friendId);
        }
 
        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(4, msgId);
        }
 
        String sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindString(5, sendTime);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        Boolean complete = entity.getComplete();
        if (complete != null) {
            stmt.bindLong(7, complete ? 1L: 0L);
        }
 
        String baseData = entity.getBaseData();
        if (baseData != null) {
            stmt.bindString(8, baseData);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(9, filePath);
        }
 
        String friendSignPublicKey = entity.getFriendSignPublicKey();
        if (friendSignPublicKey != null) {
            stmt.bindString(10, friendSignPublicKey);
        }
 
        String friendMiPublicKey = entity.getFriendMiPublicKey();
        if (friendMiPublicKey != null) {
            stmt.bindString(11, friendMiPublicKey);
        }
        stmt.bindLong(12, entity.getVoiceTimeLen());
 
        String widthAndHeight = entity.getWidthAndHeight();
        if (widthAndHeight != null) {
            stmt.bindString(13, widthAndHeight);
        }
 
        String porperty = entity.getPorperty();
        if (porperty != null) {
            stmt.bindString(14, porperty);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(3, friendId);
        }
 
        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(4, msgId);
        }
 
        String sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindString(5, sendTime);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        Boolean complete = entity.getComplete();
        if (complete != null) {
            stmt.bindLong(7, complete ? 1L: 0L);
        }
 
        String baseData = entity.getBaseData();
        if (baseData != null) {
            stmt.bindString(8, baseData);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(9, filePath);
        }
 
        String friendSignPublicKey = entity.getFriendSignPublicKey();
        if (friendSignPublicKey != null) {
            stmt.bindString(10, friendSignPublicKey);
        }
 
        String friendMiPublicKey = entity.getFriendMiPublicKey();
        if (friendMiPublicKey != null) {
            stmt.bindString(11, friendMiPublicKey);
        }
        stmt.bindLong(12, entity.getVoiceTimeLen());
 
        String widthAndHeight = entity.getWidthAndHeight();
        if (widthAndHeight != null) {
            stmt.bindString(13, widthAndHeight);
        }
 
        String porperty = entity.getPorperty();
        if (porperty != null) {
            stmt.bindString(14, porperty);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageEntity readEntity(Cursor cursor, int offset) {
        MessageEntity entity = new MessageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // friendId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msgId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sendTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // complete
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // baseData
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // filePath
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // friendSignPublicKey
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // friendMiPublicKey
            cursor.getInt(offset + 11), // voiceTimeLen
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // widthAndHeight
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // porperty
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFriendId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMsgId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSendTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setComplete(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setBaseData(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFilePath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFriendSignPublicKey(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFriendMiPublicKey(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVoiceTimeLen(cursor.getInt(offset + 11));
        entity.setWidthAndHeight(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPorperty(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
